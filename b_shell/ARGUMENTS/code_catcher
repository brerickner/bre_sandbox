#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int _strlen(char *str)
{
	int count;

	for (count = 0; str[count]; count++);
	return (count);
}

char **_getenv(char *enVar) //gets env var from path
{
	unsigned int index = 0;
	unsigned int len;


	len = _strlen(enVar);
	while(enVar[len])
	{
		if(_strncmp(enVar, environ[index], len) == 0)
			return(&environ[index]); //return address of where environ variable is stored
		len++;
	}
	return (NULL);
}

name_cpy = malloc ((sizeof(char) * len) + 1);
	}
	if(!name_cpy)
		return (NULL);
	_strcpy (name_cpy, name, len);
	env_val = strktok_r(eniron[i], "=", &tkn);
	while(environ[i])
	{
//		printf("env_val %s\n", env_val);
//		printf("i: %d\n", i);
		if (_strncmp(env_val, name_cpy)
			{
//				printf("env_val %s\n", env_val);
				env_val = strktok_r(NULL, "\n", &tkn);
//				printf("env_val %s \n," env_val);
				free(name_cpy);
				return (env_val);
			}
			++i;
			env_val = strktok_r(environ[i], "=", &tkn);
			}
		free(name_cpy);
		return(NULL);
	}
}
int print_string(char *str)
{
	return (write(1, str, strlen(str)));
}
int main (int ac, char **av)
{
	char prompt[] = "$ ";
	char *buffer;
	size_t buffSize = 0; /*initialized for memory leak purposes */
	int gl;
	(void)ac;

	av[0] = prompt; /*assigns prompt to 0 index */
	print_string(prompt); /*prints prompt $ */

	buffer = malloc(sizeof(char));
	if (buffer == NULL)
	{
		perror("Unable to allocate memory");
		exit(1);
	}

	free(buffer); /*freeing the byte used to initialize */
	gl = getline(&buffer, &buffSize, stdin); /*reallocs to what it needs?*/
	if (gl == -1)
	{
		print_err("could not read line");
		return (-1);
	}
	else
	{
		print_string(buffer);
		free(buffer);
	}
	return (0);
}
int print_err(char *str)
{
	return (write(STDERR_FILENO, str, strlen(str)));
}
