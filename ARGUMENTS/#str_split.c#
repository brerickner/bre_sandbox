#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
char **tokenizer(char *str, char *deli)
{

	char *buffer;
	size_t bufferSize = 32;
	char **token;

	(void)ac;

	buffer = av[0];

	token = strtok(buffer, " ");
	while (token != NULL)
	{
		printf("%s\n", token);
		token = strtok(NULL, " ");

	}
	return (*token);
}
#INCLUDE <STDIO.H>
#INCLUDE <STRING.H>
#INCLUDE <UNISTD.H>
#INCLUDE <STDLIB.H>

CHAR **TOKENIZER(CHAR *STR, CHAR *DELI)
{
        CHAR *TOKEN;
        CHAR **BUFFER;
        SIZE_T *BUFFSIZE;
        INT GL = MALLOC(GETLINE(&BUFFER, &BUFFSIZE, STDIN));

        IF(GL == -1)
                RETURN (NULL);
        BUFFER =
		TOKEN = STRTOK(BUFFER, DELI);
        WHILE (TOKEN != NULL)
        {
                PRINTF("%S\N", TOKEN);
                TOKEN = STRTOK(NULL, " ");
        }
        RETURN (BUFFER);
}
INT PRINT_STRING(CHAR *STR)
{
        RETURN (WRITE(1, STR, STRLEN(STR)));
}
INT MAIN (INT AC, CHAR **AV)
{
        INT INDEX;
        (VOID)AC;

        RETURN (0);
}#INCLUDE <STDIO.H>
#INCLUDE <STRING.H>
#INCLUDE <UNISTD.H>
#INCLUDE <STDLIB.H>

CHAR **TOKENIZER(CHAR *STR, CHAR *DELI)
{
        CHAR *TOKEN;
        CHAR **BUFFER;
        SIZE_T *BUFFSIZE;
        INT GL = MALLOC(GETLINE(&BUFFER, &BUFFSIZE, STDIN));

        IF(GL == -1)
                RETURN (NULL);
        BUFFER =
		TOKEN = STRTOK(BUFFER, DELI);
        WHILE (TOKEN != NULL)
        {
                PRINTF("%S\N", TOKEN);
                TOKEN = STRTOK(NULL, " ");
        }
        RETURN (BUFFER);
}
INT PRINT_STRING(CHAR *STR)
{
        RETURN (WRITE(1, STR, STRLEN(STR)));
}
INT MAIN (INT AC, CHAR **AV)
{
        INT INDEX;
        (VOID)AC;

        RETURN (0);
	getline(&buffer, &bufferSize, stdin);
}
